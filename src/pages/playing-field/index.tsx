import React, { useEffect, useState } from 'react';
import { Gamers } from '../../components/gamers';
import { Container } from '../../components/container';
import { Timer } from '../../components/timer';
import './index.css';
import { useSocket } from '../../features/socket';
import { Chat } from '../../components/chat';
import { Step } from '../../components/step';
import { Board } from '../../components/board';
import { useGetCurrentGameQuery } from '../../app/services/gameApi';
import { selectCurrent } from '../../features/player/playerSlice';
import { useSelector } from 'react-redux';
import { Game, Player } from '../../app/types';
import { useModal } from '../../components/modal-context';
import { EndGameModal } from '../../components/end-game-modal';
import { useNotifications } from '../../components/notification-provider';

export const PlayingField = () => {
  //–î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  const { addNotification } = useNotifications();
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç–æ—Ä–∞
  const current = useSelector(selectCurrent);
  const { data, isLoading } = useGetCurrentGameQuery(
    { id: current?.id ?? '' },  // –í—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–¥–∞–µ–º –æ–±—ä–µ–∫—Ç
    { skip: !current }          // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å, –µ—Å–ª–∏ current –Ω–µ—Ç
  );
  //–ú–∞–Ω–∏–ø—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º 
  const { openModal } = useModal();
  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–æ–∫–µ—Ç—É
  const [gameData, setGameData] = useState<Game>();
  const { socket, isConnected } = useSocket();

  // üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ WebSocket
  useEffect(() => {
    if (!socket || !isConnected || !gameData?.id) return;

    // –°–ª—É—à–∞–µ–º "moveMade" –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    socket.on("moveMade", (gameData) => {
      setGameData(gameData);
      if (gameData.status === "FINISHED" || gameData.status === "DRAW") {
        openModal("endGameModal", gameData);
      }
    });
    socket.on("alertAboutMove", () => {
      if (data?.playerSymbol === gameData?.nowMove) addNotification('–î–æ –∫–æ–Ω—Ü–∞ —Ö–æ–¥–∞ –æ—Å—Ç–∞–ª–∞—Å—å –º–∏–Ω—É—Ç–∞!', 'warning');
    });
    socket.emit('initChat', { gameId: gameData?.id });

    return () => {
      socket.off("moveMade");
      socket.off("alertAboutMove");
    };
  }, [socket, isConnected, gameData]);

  useEffect(() => {
    if (data) {
      setGameData(data);
    }
  }, [data]);

  const handleClick = (index: number) => {
    if (!socket || !isConnected) return;
    if (!data?.id) return console.error("–û—à–∏–±–∫–∞: ID –∏–≥—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");
    if (gameData?.board[index] !== null) return console.warn("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ö–æ–¥: —è—á–µ–π–∫–∞ –∑–∞–Ω—è—Ç–∞");

    const newBoard = [...gameData?.board];
    newBoard[index] = gameData?.nowMove === 'X' ? 'X' : 'O';

    //–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ö–æ–¥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç
    socket.emit("playerMove", { board: newBoard, id: data.id });
  };

  if (isLoading || !data || !gameData) {
    return <p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>;
  }
  // –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ –ø–æ —Ö–æ–¥—É
  const nowMovePlayer: Player = gameData?.nowMove === 'X' ? data.player1 : data.player2;
  return (
    <>
      <EndGameModal />
      <>
        {/* –î–µ—Å–∫—Ç–æ–ø–Ω–∞—è –≤–µ—Ä—Å–∏—è */}
        <Container className='common desktop-field'>
          <Gamers player1={data.player1} player2={data.player2} />
          <Container style={{ flexDirection: 'column', justifyContent: 'space-between', alignItems: 'center', gap: '40px', backgroundColor: '#f6f6f6', maxWidth: '663px' }}>
            <Timer createTime={(gameData?.status === 'FINISHED' || gameData?.status === 'DRAW') ? null : data.createTime} />
            <Board isMakingMove={data.playerSymbol !== gameData?.nowMove || (gameData?.status === 'FINISHED' || gameData?.status === 'DRAW')} nowMove={gameData?.nowMove} board={gameData?.board ?? []} click={handleClick} winningPattern={gameData?.winningPattern ?? []} />
            <Step nowMove={gameData?.nowMove} player={nowMovePlayer} />
          </Container>
          <Chat playerName={data.player2.fullName} currentGameID={gameData.id} socket={socket} isConnected={isConnected} />
        </Container>
      </>
      <>
        {/* –ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è */}
        <Container className='common mobile-field'>
          <Gamers player1={data.player1} player2={data.player2} />
          <Container style={{ flexDirection: 'column', justifyContent: 'space-between', alignItems: 'center', gap: '40px', backgroundColor: '#f6f6f6', maxWidth: '663px' }}>
            <Timer createTime={(gameData?.status === 'FINISHED' || gameData?.status === 'DRAW') ? null : data.createTime} />
            <Step nowMove={gameData?.nowMove} player={nowMovePlayer} />
            <Board isMakingMove={data.playerSymbol !== gameData?.nowMove || (gameData?.status === 'FINISHED' || gameData?.status === 'DRAW')} nowMove={gameData?.nowMove} board={gameData?.board ?? []} click={handleClick} winningPattern={gameData?.winningPattern ?? []} />
          </Container>
          <Chat playerName={data.player2.fullName} currentGameID={gameData.id} socket={socket} isConnected={isConnected} />
        </Container>
      </>
    </>

  );
};